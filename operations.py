import json
import string
import random
from json import JSONDecodeError
from datetime import datetime

def Register(type,gamers_json_file,sellers_json_file,Email_ID,Username,Password,Contact_Number):
    '''Register Function || Already Given'''
    if type.lower()=='seller':
        f=open(sellers_json_file,'r+')
        d={
            "Email":Email_ID,
            "Username":Username,
            "Password":Password,
            "Contact Number":Contact_Number,
        }
        try:
            content=json.load(f)
            if d not in content and d["Username"] not in str(content):
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()
        return True
    elif type.lower()=='gamer':
        f=open(gamers_json_file,'r+')
        d={
            "Email":Email_ID,
            "Username":Username,
            "Password":Password,
            "Contact Number":Contact_Number,
            "Wishlist":[],
            "Cart":[],
        }
        try:
            content=json.load(f)
            if d not in content and d["Username"] not in str(content):
                content.append(d)
                f.seek(0)
                f.truncate()
                json.dump(content,f)
        except JSONDecodeError:
            l=[]
            l.append(d)
            json.dump(l,f)
        f.close()

def Login(type,gamers_json_file,sellers_json_file,Username,Password):
    '''Login Functionality || Return True if successfully logged in else False || Already Given'''
    d=0
    if type.lower()=='seller':
        f=open(sellers_json_file,'r+')
    else:
        f=open(gamers_json_file,'r+')
    try:
        content=json.load(f)
    except JSONDecodeError:
        return False
    for i in range(len(content)):
        if content[i]["Username"]==Username and content[i]["Password"]==Password:
            d=1
            break
    f.seek(0)
    f.truncate()
    json.dump(content,f)
    f.close()
    if d==0:
        return False
    return True

def AutoGenerate_ProductID():
    '''Return a autogenerated random product ID || Already Given'''
    product_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=4))
    return product_ID

def AutoGenerate_OrderID():
    '''Return a autogenerated random product ID || Already Given'''
    Order_ID=''.join(random.choices(string.ascii_uppercase+string.digits,k=3))
    return Order_ID

def days_between(d1, d2):
    '''Calculating the number of days between two dates || Already Given'''
    d1 = datetime.strptime(d1, "%Y-%m-%d")
    d2 = datetime.strptime(d2, "%Y-%m-%d")
    return abs((d2 - d1).days)

def Create_Product(owner,product_json_file,product_ID,product_title,product_type,price_per_day,total_stock_available):
    '''Creating a product || Return True if successfully created else False'''
    '''Write your code below'''
    product = {
        "Owner": owner,
        "ProductID": product_ID,
        "ProductTitle": product_title,
        "ProductType": product_type,
        "PricePerDay": price_per_day,
        "TotalStockAvailable": total_stock_available,
    }
    all_products = Fetch_all_products(product_json_file)
    all_products.append(product)
    with open(product_json_file, 'w') as f:
        json.dump(all_products, f)
    return True


def Fetch_all_Products_created_by_seller(owner,product_json_file):
    '''Get all products created by the seller(owner)'''
    '''Write your code below'''
    try:
        with open(product_json_file, 'r') as products_f:
            products_data = json.load(products_f)
            
            seller_products = [product for product in products_data if product.get("Seller Username") == owner]
            
            return seller_products
    
    except (FileNotFoundError, json.JSONDecodeError):
        pass
    
    return []

def Fetch_all_products(products_json_file):
    '''Get all products created till now || Helper Function || Already Given'''
    All_Products_list=[]
    f=open(products_json_file,'r')
    try:
        content=json.load(f)
        All_Products_list=content
    except JSONDecodeError:
        pass
    return All_Products_list

def Fetch_Product_By_ID(product_json_file,product_ID):
    '''Get product deatils by product ID'''
    '''Write your code below'''
    try:
        with open(product_json_file, 'r') as products_f:
            products_data = json.load(products_f)
            
            for product in products_data:
                if product.get("Product ID") == product_ID:
                    return product
                
    except (FileNotFoundError, json.JSONDecodeError):
        pass
    
    return None
product_ID = "example_product_id"
product_json_file = "Products.json"
product_details = Fetch_Product_By_ID(product_json_file, product_ID)

if product_details:
    print("Product Title: " + str(product_details.get("Product Title")))
    print("Product Price: " + str(product_details.get("price_per_day")))
else:
    print("Product not found.")

def Update_Product(Username,product_json_file,product_ID,detail_to_be_updated,new_value):
    '''Updating Product || Return True if successfully updated else False'''
    '''Write your code below'''
    try:
        with open(product_json_file, 'r+') as products_f:
            products_data = json.load(products_f)
            
            for product in products_data:
                if product.get("Product ID") == product_ID:
                    if product.get("Seller Username") == Username:
                        product[detail_to_be_updated] = new_value
                        
                        products_f.seek(0)
                        products_f.truncate()
                        json.dump(products_data, products_f, indent=4)
                        
                        return True 
    
    except (FileNotFoundError, json.JSONDecodeError):
        pass
    
    return False

def Add_item_to_wishlist(Username,product_ID,gamers_json_file):
    '''Add Items to wishlist || Return True if added successfully else False'''
    '''Write your code below'''
    try:
        with open(gamers_json_file, 'r+') as f:
            gamers_data = json.load(f)
            for gamer in gamers_data:
                if gamer["Username"] == Username:
                    if product_ID not in gamer["Wishlist"]:
                        gamer["Wishlist"].append(product_ID)
                        f.seek(0)
                        f.truncate()
                        json.dump(gamers_data, f)
                        return True
    except (FileNotFoundError, json.JSONDecodeError):
        pass
    return False



def Remove_item_from_wishlist(Username,product_ID,gamers_json_file):
    '''Remove items from wishlist || Return True if removed successfully else False'''
    '''Write your code below'''
    try:
        with open(gamers_json_file, 'r+') as f:
            gamers_data = json.load(f)
            for gamer in gamers_data:
                if gamer["Username"] == Username:
                    if product_ID in gamer["Wishlist"]:
                        gamer["Wishlist"].remove(product_ID)
                        f.seek(0)
                        f.truncate()
                        json.dump(gamers_data, f)
                        return True
    except (FileNotFoundError, json.JSONDecodeError):
        pass
    return False

def Add_item_to_cart(Username,product_ID,Quantity,gamers_json_file,booking_start_date,booking_end_date,products_json_file):
    '''Add item to the cart || Check whether the quantity mentioned is available || Return True if added successfully else False'''
    '''Add the Product ID, Quantity, Price, Booking Start Date, Booking End Date in the cart as list of dictionaries'''
    '''Write your code below'''
    try:
        with open(gamers_json_file, 'r+') as gamers_f:
            gamers_data = json.load(gamers_f)
            
            with open(products_json_file, 'r+') as products_f:
                products_data = json.load(products_f)
                
                for gamer in gamers_data:
                    if gamer.get("Username") == Username:
                        for product in products_data:
                            if product.get("ID") == product_ID:  
                                if Quantity <= product.get("total_stock_available"): 
                                    total_price = Quantity * product.get("price_per_day")  
                                    
                                    cart_item = {
                                        "Product ID": product_ID,
                                        "Quantity": Quantity,
                                        "Price": product.get("price_per_day"),  
                                        "Booking Start Date": booking_start_date,
                                        "Booking End Date": booking_end_date,
                                        "Total Price": total_price
                                    }
                                    
                                    if "Cart" not in gamer:
                                        gamer["Cart"] = []
                                    
                                    gamer["Cart"].append(cart_item)
                                    
                                    product["total_stock_available"] -= Quantity
                                    
                                    gamers_f.seek(0)
                                    gamers_f.truncate()
                                    json.dump(gamers_data, gamers_f)
                                    
                                    products_f.seek(0)
                                    products_f.truncate()
                                    json.dump(products_data, products_f)
                                    
                                    return True 
    except (FileNotFoundError, json.JSONDecodeError):
        pass
    
    return False


def Remove_item_from_cart(Username,product_ID,gamers_json_file):
    '''Remove items from the cart || Return True if removed successfully else False'''
    '''Write your code below'''
    try:
        with open(gamers_json_file, 'r+') as f:
            gamers_data = json.load(f)
            for gamer in gamers_data:
                if gamer["Username"] == Username and "Cart" in gamer:
                    for cart_item in gamer["Cart"]:
                        if cart_item["Product ID"] == product_ID:
                            gamer["Cart"].remove(cart_item)
                            f.seek(0)
                            f.truncate()
                            json.dump(gamers_data, f)
                            return True
    except (FileNotFoundError, json.JSONDecodeError):
        pass
    return False
    

def View_Cart(Username,gamers_json_file):
    '''Return the current cart of the user'''
    '''Write your code below'''
    try:
        with open(gamers_json_file, 'r') as f:
            gamers_data = json.load(f)
            for gamer in gamers_data:
                if gamer["Username"] == Username and "Cart" in gamer:
                    return gamer["Cart"]
    except (FileNotFoundError, json.JSONDecodeError):
        pass
    return []

def Place_order(Username, gamers_json_file, Order_Id, orders_json_file, products_json_file):
    '''Place order || Return True if order placed successfully else False || Decrease the quantity of the product ordered if successful'''
    try:
        with open(gamers_json_file, 'r+') as gamers_f:
            gamers_data = json.load(gamers_f)
            with open(orders_json_file, 'r+') as orders_f:
                orders_data = json.load(orders_f)
                for gamer in gamers_data:
                    if gamer.get("Username") == Username:
                        total_order_amount = sum(item.get("Total Price", 0) for item in gamer.get("Cart", []))
                        if total_order_amount > 0:
                        
                            order = {
                                "Order ID": Order_Id,
                                "Username": Username,
                                "Total Amount": total_order_amount
                            }
                            if "Orders" not in gamer:
                                gamer["Orders"] = []
                            gamer["Orders"].append(order)
                            gamer["Cart"] = []
                            
                            gamers_f.seek(0)
                            gamers_f.truncate()
                            json.dump(gamers_data, gamers_f)
                            
                            orders_f.seek(0)
                            orders_f.truncate()
                            json.dump(orders_data, orders_f)
                            
                            return True
    
    except (FileNotFoundError, json.JSONDecodeError):
        pass
    
    return False  

# Example usage:
Username = "example_user"
Order_Id = "example_order_id"
gamers_json_file = "Gamers.json"
orders_json_file = "Orders.json"
products_json_file = "Products.json"
order_placed = Place_order(Username, gamers_json_file, Order_Id, orders_json_file, products_json_file)

if order_placed:
    print("Order placed successfully.")
else:
    print("Order could not be placed.")


def View_User_Details(gamers_json_file,Username):
    '''Return a list with all gamer details based on the username || return an empty list if username not found'''
    '''Write your code below'''
    try:
        with open(gamers_json_file, 'r') as gamers_f:
            gamers_data = json.load(gamers_f)
            
            for user in gamers_data:
                if user.get("Username") == Username:
                    return user
                
    except (FileNotFoundError, json.JSONDecodeError):
        pass
    
    return {} 

# Example usage:
Username = "example_username"
gamers_json_file = "gamers.json"
user_details = View_User_Details(gamers_json_file, Username)

if user_details:
    print("Email: " + str(user_details.get("Email")))
    print("Contact Number: " + str(user_details.get("Contact Number")))
else:
    print("User not found.")

def Update_User(gamers_json_file,Username,detail_to_be_updated,updated_detail):
    '''Update the detail_to_be_updated of the user to updated_detail || Return True if successful else False'''
    '''Write your code below'''
    try:
        with open(gamers_json_file, 'r+') as f:
            gamers_data = json.load(f)
            for gamer in gamers_data:
                if gamer["Username"] == Username:
                    if detail_to_be_updated in gamer:
                        gamer[detail_to_be_updated] = updated_detail
                        f.seek(0)
                        f.truncate()
                        json.dump(gamers_data, f)
                        return True
    except (FileNotFoundError, json.JSONDecodeError):
        pass
    return False

def Fetch_all_orders(orders_json_file,Username):
    '''Fetch all previous orders for the user and return them as a list'''
    '''Write your code below'''
    try:
        with open(orders_json_file, 'r') as orders_f:
            orders_data = json.load(orders_f)
            user_orders = [order for order in orders_data if order.get("Username") == Username]
            
            return user_orders
    
    except (FileNotFoundError, json.JSONDecodeError):
        pass
    
    return []

# Example usage:
Username = "example_username"
orders_json_file = "Orders.json"
user_orders = Fetch_all_orders(orders_json_file, Username)
print(user_orders)